@* DTO ve Response sınıflarının tam yollarını belirtiyoruz *@
@using SO.Application.DTOs.AccountModule.Account
@using SO.Application.Features.Queries.AccountModule.Account.GetAllAccount
@model GetAllAccountQueryResponse

@{
    ViewData["Title"] = "Müşteri Listesi";
    var accountList = Model.Result as List<ListAccount>;
}

<h1>Müşteri Listesi</h1>

<p>
    <a asp-action="Create">Yeni Müşteri Ekle</a>
</p>
<table class="table table-striped table-hover">
    <thead class="table-dark">
        <tr>
            <th>Firma Adı</th>
            <th>Yetkili Kişi</th>
            <th>Email</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (accountList != null && accountList.Any())
        {
            @foreach (var item in accountList)
            {
                <tr>
                    <td>@Html.DisplayFor(modelItem => item.CompanyName)</td>
                    <td>@Html.DisplayFor(modelItem => item.ContactPerson)</td>
                    <td>@Html.DisplayFor(modelItem => item.Email)</td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary">Düzenle</a> |
                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-info">Detaylar</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-outline-danger">Sil</a>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4" class="text-center">Henüz kayıtlı müşteri bulunmamaktadır.</td>
            </tr>
        }
    </tbody>
</table>
